import os
import shutil
import tempfile
from pathlib import Path
from typing import List, Dict, Any
from loguru import logger

from src.models.schemas import GeneratedFile


class FileManager:
    """Service for managing generated files and workspaces"""

    def __init__(self):
        self.temp_workspaces: List[str] = []

    def create_workspace(
        self, files: List[GeneratedFile], base_path: str = None
    ) -> str:
        """Create a workspace directory with generated files"""
        if base_path:
            workspace_path = base_path
            os.makedirs(workspace_path, exist_ok=True)
        else:
            workspace_path = tempfile.mkdtemp(prefix="void_editor_workspace_")
            self.temp_workspaces.append(workspace_path)

        logger.info(f"Creating workspace at: {workspace_path}")

        for file in files:
            self._write_file_to_workspace(workspace_path, file)

        # Create basic project structure files if needed
        self._create_project_structure(workspace_path, files)

        return workspace_path

    def _write_file_to_workspace(self, workspace_path: str, file: GeneratedFile):
        """Write a single file to the workspace"""
        file_path = Path(workspace_path) / file.path

        # Create directory structure
        file_path.parent.mkdir(parents=True, exist_ok=True)

        # Write file content
        try:
            file_path.write_text(file.content, encoding="utf-8")
            logger.debug(f"Created file: {file.path}")
        except Exception as e:
            logger.error(f"Failed to write file {file.path}: {str(e)}")
            raise

    def _create_project_structure(
        self, workspace_path: str, files: List[GeneratedFile]
    ):
        """Create basic project structure and configuration files"""
        languages = set(f.language for f in files if f.file_type == "source")

        # Create package.json for JS/TS projects
        if any(lang in languages for lang in ["typescript", "javascript"]):
            self._create_package_json(workspace_path, files)

        # Create requirements.txt for Python projects
        if "python" in languages:
            self._create_requirements_txt(workspace_path, files)

        # Create .gitignore
        self._create_gitignore(workspace_path, languages)

        # Create README.md if not exists
        readme_exists = any(f.path.lower().endswith("readme.md") for f in files)
        if not readme_exists:
            self._create_readme(workspace_path)

    def _create_package_json(self, workspace_path: str, files: List[GeneratedFile]):
        """Create package.json for Node.js projects"""
        package_json_content = {
            "name": "void-editor-generated-project",
            "version": "1.0.0",
            "description": "Generated by Void Editor AI",
            "main": "index.js",
            "scripts": {
                "test": "jest",
                "build": "tsc",
                "dev": "ts-node src/index.ts",
                "start": "node dist/index.js",
            },
            "devDependencies": {
                "@types/node": "^20.0.0",
                "typescript": "^5.0.0",
                "ts-node": "^10.0.0",
                "jest": "^29.0.0",
                "@types/jest": "^29.0.0",
            },
            "dependencies": {},
        }

        # Check if React/Vue/Angular files exist and add appropriate dependencies
        react_files = any("react" in f.content.lower() for f in files)
        vue_files = any(".vue" in f.path.lower() for f in files)

        if react_files:
            package_json_content["dependencies"]["react"] = "^18.0.0"
            package_json_content["dependencies"]["react-dom"] = "^18.0.0"
            package_json_content["devDependencies"]["@types/react"] = "^18.0.0"
            package_json_content["devDependencies"]["@types/react-dom"] = "^18.0.0"

        if vue_files:
            package_json_content["dependencies"]["vue"] = "^3.0.0"

        import json

        package_json_path = Path(workspace_path) / "package.json"
        package_json_path.write_text(
            json.dumps(package_json_content, indent=2), encoding="utf-8"
        )
        logger.debug("Created package.json")

    def _create_requirements_txt(self, workspace_path: str, files: List[GeneratedFile]):
        """Create requirements.txt for Python projects"""
        requirements = [
            "# Generated by Void Editor AI",
            "fastapi>=0.100.0",
            "uvicorn>=0.22.0",
            "pydantic>=2.0.0",
            "pytest>=7.0.0",
            "pytest-asyncio>=0.21.0",
        ]

        # Check for specific imports and add relevant packages
        all_content = "\n".join(f.content for f in files)

        if "requests" in all_content:
            requirements.append("requests>=2.28.0")
        if "sqlalchemy" in all_content.lower():
            requirements.append("sqlalchemy>=2.0.0")
        if "pandas" in all_content:
            requirements.append("pandas>=1.5.0")
        if "numpy" in all_content:
            requirements.append("numpy>=1.24.0")

        requirements_path = Path(workspace_path) / "requirements.txt"
        requirements_path.write_text("\n".join(requirements), encoding="utf-8")
        logger.debug("Created requirements.txt")

    def _create_gitignore(self, workspace_path: str, languages: set):
        """Create .gitignore file"""
        gitignore_content = [
            "# Generated by Void Editor AI",
            "",
            "# General",
            ".DS_Store",
            ".env",
            ".env.local",
            "*.log",
            "",
            "# IDE",
            ".vscode/",
            ".idea/",
            "*.swp",
            "*.swo",
            "",
        ]

        if any(lang in languages for lang in ["typescript", "javascript"]):
            gitignore_content.extend(
                [
                    "# Node.js",
                    "node_modules/",
                    "npm-debug.log*",
                    "yarn-debug.log*",
                    "yarn-error.log*",
                    "dist/",
                    "build/",
                    ".next/",
                    "",
                ]
            )

        if "python" in languages:
            gitignore_content.extend(
                [
                    "# Python",
                    "__pycache__/",
                    "*.py[cod]",
                    "*$py.class",
                    "*.so",
                    ".Python",
                    "env/",
                    "venv/",
                    ".venv/",
                    ".pytest_cache/",
                    "",
                ]
            )

        gitignore_path = Path(workspace_path) / ".gitignore"
        gitignore_path.write_text("\n".join(gitignore_content), encoding="utf-8")
        logger.debug("Created .gitignore")

    def _create_readme(self, workspace_path: str):
        """Create README.md file"""
        readme_content = """# Generated Project

This project was generated by Void Editor AI based on Jira ticket requirements.

## Getting Started

### Prerequisites

Make sure you have the following installed:
- Node.js (for JavaScript/TypeScript projects)
- Python 3.8+ (for Python projects)

### Installation

For Node.js projects:
```bash
npm install
```

For Python projects:
```bash
pip install -r requirements.txt
```

### Running the Project

For Node.js projects:
```bash
npm run dev
```

For Python projects:
```bash
python main.py
```

### Running Tests

For Node.js projects:
```bash
npm test
```

For Python projects:
```bash
pytest
```

## Project Structure

- `src/` - Source code files
- `tests/` - Test files
- `docs/` - Documentation (if generated)

## Generated by Void Editor

This project was automatically generated based on Jira ticket requirements.
Review and modify the code as needed before using in production.
"""

        readme_path = Path(workspace_path) / "README.md"
        readme_path.write_text(readme_content, encoding="utf-8")
        logger.debug("Created README.md")

    def cleanup_temp_workspaces(self):
        """Clean up all temporary workspaces"""
        for workspace in self.temp_workspaces:
            try:
                if os.path.exists(workspace):
                    shutil.rmtree(workspace)
                    logger.debug(f"Cleaned up workspace: {workspace}")
            except Exception as e:
                logger.warning(f"Failed to cleanup workspace {workspace}: {str(e)}")

        self.temp_workspaces.clear()

    def get_workspace_files(self, workspace_path: str) -> List[Dict[str, Any]]:
        """Get information about all files in a workspace"""
        files = []
        workspace_path = Path(workspace_path)

        for file_path in workspace_path.rglob("*"):
            if file_path.is_file():
                try:
                    relative_path = file_path.relative_to(workspace_path)
                    file_size = file_path.stat().st_size

                    files.append(
                        {
                            "path": str(relative_path),
                            "full_path": str(file_path),
                            "size_bytes": file_size,
                            "size_lines": len(
                                file_path.read_text(encoding="utf-8").split("\n")
                            ),
                            "extension": file_path.suffix,
                            "modified_time": file_path.stat().st_mtime,
                        }
                    )
                except Exception as e:
                    logger.warning(f"Could not read file {file_path}: {str(e)}")

        return files

    def validate_workspace(self, workspace_path: str) -> Dict[str, Any]:
        """Validate workspace structure and files"""
        validation_result = {
            "valid": True,
            "errors": [],
            "warnings": [],
            "file_count": 0,
            "total_size_bytes": 0,
        }

        try:
            workspace_path = Path(workspace_path)

            if not workspace_path.exists():
                validation_result["valid"] = False
                validation_result["errors"].append("Workspace directory does not exist")
                return validation_result

            files = self.get_workspace_files(workspace_path)
            validation_result["file_count"] = len(files)
            validation_result["total_size_bytes"] = sum(f["size_bytes"] for f in files)

            # Check for required files based on project type
            file_names = [f["path"] for f in files]

            if any(name.endswith((".ts", ".js")) for name in file_names):
                if "package.json" not in file_names:
                    validation_result["warnings"].append(
                        "package.json not found for JavaScript/TypeScript project"
                    )

            if any(name.endswith(".py") for name in file_names):
                if "requirements.txt" not in file_names:
                    validation_result["warnings"].append(
                        "requirements.txt not found for Python project"
                    )

        except Exception as e:
            validation_result["valid"] = False
            validation_result["errors"].append(f"Validation error: {str(e)}")

        return validation_result
